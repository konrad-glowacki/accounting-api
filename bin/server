#!/usr/bin/env node
'use strict';

const app = require('../server/app');
const debug = require('debug')('accounting-api:server');
const http = require('http');
const server = http.createServer(app);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || '3000');

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES': {
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    }

    case 'EADDRINUSE': {
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    }

    default: {
      throw error;
    }
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  debug('Listening on ' + bind);
}

app.set('port', port);

server.listen(port);
console.log('Express server listening on port %d', port);

server.on('error', onError);
server.on('listening', onListening);
